\input texinfo.tex
@c %**start of header
@setfilename cctemplate.info
@settitle CCTemplate
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      CCTemplate

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    CCTemplate

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           cctemplate

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi-ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2012-2019

@c ------------------------------------------------------------

@set CCEXCEPTIONS_VERSION       0.8.0
@set CCMEMORY_VERSION           0.2.1
@set CCTESTS_VERSION            0.3.0

@set GITHUB_URL                 @url{https://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BITBUCKET_URL              @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DOWNLOAD_URL               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DOCUMENTATION_URL          @url{https://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}

@macro templateref{NODE, TITLE}
@xref{\NODE\,\TITLE\,\TITLE\,template}
@end macro

@macro template{}
@acronym{TEMPLATE}
@end macro

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @value{VERSION} of @value{PACKAGE}, a C11 language library
implementing a template library.

The library supports @posix{} platforms.  The library depends on the packages: CCExceptions, at
least version @value{CCEXCEPTIONS_VERSION}; CCMemory, at least version @value{CCMEMORY_VERSION};
CCStructs, at least version @value{CCSTRUCTS_VERSION}.  To run the test suite: the package depends
upon the package CCTests, at least version @value{CCTESTS_VERSION}.

This package is distributed under the terms of the @gnu{} General Public License (@gpl{}).

The latest release can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document under the terms of the @gnu{}
Free Documentation License, Version 1.3 or any later version published by the Free Software
Foundation; with Invariant Sections being ``@gnu{} Free Documentation License'' and ``@gnu{} General
Public License'', no Front--Cover Texts, and no Back--Cover Texts.  A copy of the license is
included in the section entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @value{VERSION}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* cctemplate: (cctemplate).       CCTemplate a template library.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* init::                        Library initialisation.
* version::                     Version functions.
* conditions::                  Exceptional condition objects.
* utils::                       Utility definitions.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


This document describes version @value{VERSION} of @value{PACKAGE}, a C11 language library
implementing a template library.

This package supports @posix{} platforms.  This package depends on the packages: CCExceptions, at
least version @value{CCEXCEPTIONS_VERSION}; CCMemory, at least version @value{CCMEMORY_VERSION};
CCStructs, at least version @value{CCSTRUCTS_VERSION}.  To run the test suite: this package depends
upon the package CCTests, at least version @value{CCTESTS_VERSION}.

@cindex @file{cctemplate.h}, header file
@cindex Header file @file{cctemplate.h}
@value{PACKAGE} installs the single header file @file{cctemplate.h}.  All the function names in the
@api{} are prefixed with @code{cct_}; all the preprocessor symbol names are prefixed with
@code{CCT_}; all the type names are prefixed with @code{cct_} and suffixed with @code{_t}.

@strong{Notice that, before using the library, we need to call the global initialisation function
@cfunc{cctemplate_library_init}}.

@menu
* overview linking::            Linking code with the library.
* overview ccnames::            Generated function names.
* overview exceptions::         Handling exceptional conditions.
* overview allocation::         Memory allocation for pathname instances.
@end menu

@c page
@node overview linking
@section Linking code with the library


This package installs a data file for @command{pkg-config}, so when searching for the installed
library with the @gnu{} Autotools, we can add the following macro use to @file{configure.ac}:

@example
PKG_CHECK_MODULES([CCTEMPLATE],[cctemplate >= 0.1.0])
@end example

@noindent
which will set the variables @code{CCTEMPLATE_LIBS} and @code{CCTEMPLATE_CFLAGS}.  To avoid
problems with @command{pkg-config}, we need to remember that:

@itemize
@item
The macro file defining @code{PKG_CHECK_MODULES} is installed by the package @code{pkg-config}; such
file usually is in one of the locations:

@center @file{/usr/share/aclocal/pkg.m4}
@center @file{/usr/local/share/aclocal/pkg.m4}

@item
The macro file is located by @command{aclocal}, which in turn is installed by the package @gnu{}
Automake; @command{aclocal} is used by @command{autoreconf}.  We must make sure that
@command{aclocal} finds the installed macro files; for this purpose we can use the environment
variable @env{ACLOCAL_PATH}; under a Bourne shell we can do this with:

@example
export ACLOCAL_PATH=/usr/local/share/aclocal:/usr/share/aclocal
@end example
@end itemize

Alternatively we can use the raw @gnu{} Autoconf macros:

@example
AC_CHECK_LIB([cctemplate],[cct_version_string],,
  [AC_MSG_FAILURE([test for CCTemplate library failed])])
AC_CHECK_HEADERS([cctemplate.h],,
  [AC_MSG_FAILURE([test for CCTemplate header failed])])
@end example

@c page
@node overview ccnames
@section Generated function names


@value{PACKAGE} uses the facilities of the package CCStructs to generate function names for ``well
known'' functions, using the preprocessor macros defined in the header file @file{ccnames.h};
@ccstructsref{ccnames, Automatically generated @api{} names}.  Example uses of such macros are:

@example
ccname_init(ccptn_t, pointer, clean)
ccname_new(ccptn_t,  pointer, clean)
@end example

@noindent
which expand into names for constructor functions of @objtype{ccptn_t} structures, initialised from
a pointer, registered to be destroyed using a clean handler.  Another example is:

@example
ccname_iface_new(ccstructs_dumpable_I, ccptn_t)
@end example

@noindent
which expands into the name of the constructor function for the interface
@objtype{ccstructs_dumpable_I} implemented by the @struct{} type @objtype{ccptn_t}.

@c page
@node overview exceptions
@section Handling exceptional conditions


@value{PACKAGE} uses the facilities of the package CCExceptions to signal exceptional conditions by
performing non--local exits to a previously defined location; @ccexceptionsref{Top, CCExceptions}.
The basic template of such mechanism is:

@example
cce_location_t  L[1];

if (cce_location(L)) @{
  /* Handle the exception here. */
  cce_run_catch_handlers_final(L);
@} else @{
  /* Do the work here. */
  cce_run_body_handlers(L);
@}
@end example

CCExceptions allows us to perform destruction operations upon leaving a location (represented by an
initialised instance of @objtype{cce_location_t}), by using exception handlers that register an
asynchronous resource for destruction; @ccexceptionsref{handlers, The locations handlers @api{}}.

@value{PACKAGE} defines two categories of constructors:

@table @dfn
@item plain
A @dfn{plain} constructor @strong{does not} register the @struct{} instance it builds for
destruction upon leaving a location.  It is up to us to do so, using either the @iface{destructor}
interface or the handlers @api{}.

@item guarded
A @dfn{guarded} constructor @strong{does} register the @struct{} instance it builds for destruction
upon leaving a location.  The destructor will be called by @cfunc{cce_run_body_handlers} or
@cfunc{cce_run_catch_handlers} or one of their variants.

The guarded constructors have names built by @cfunc{ccname_init} or @cfunc{ccname_new} with the
@code{clean} or @code{error} variants.
@end table

@c page
@node overview allocation
@section Memory allocation for pathname instances


@value{PACKAGE} represents file system pathnames with instances of the @struct{} type
@objtype{ccptn_t}.  Memory allocation for the representation is handled using allocators as defined
by the package CCMemory, @ccmemoryref{allocators, The generic allocators @api{}}.

From the point of view of instance constructors, there are two categories:

@table @dfn
@item embedded
An @dfn{embedded} instance of @objtype{ccptn_t} is allocated on the stack or embedded into an
enclosing data structure.  The constructors of such instances do not have to allocate memory for the
instance itself; they might allocate memory for the internal representation of the pathname.

The constructors for embedded instances have names generated by @cfunc{ccname_init};
@ccstructsref{ccnames struct common, Well known functions for @struct{} types}.

@item standalone
A @dfn{standalone} instance of @objtype{ccptn_t} is allocated on the heap.  The constructors of such
instances do have to allocate memory for both the instance itself and the internal representation of
the pathname.

The constructors for embedded instances have names generated by @cfunc{ccname_new};
@ccstructsref{ccnames struct common, Well known functions for @struct{} types}.
@end table

@c page
@node init
@chapter Library initialisation


@deftypefun void cct_library_init (void)
Initialise the internal structures of the library.  It is fine to call this function multiple times.

@quotation
@strong{NOTE} This function is defined with the @gcc{} attribute @code{constructor}, so, when the
library is built with @gcc{}: it will be called automatically by the library initialisation code.
@end quotation
@end deftypefun

@c page
@node version
@chapter Version functions


The installed libraries follow version numbering as established by the @gnu{} Autotools.  For an
explanation of interface numbers as managed by @gnu{} Libtool @xref{Libtool versioning, interface,
Libtool's versioning system, libtool, Shared library support for @gnu{}}.


@deftypefun {char const *} cct_version_string (void)
Return a pointer to a statically allocated @asciiz{} string representing the interface version
number.
@end deftypefun


@deftypefun int cct_version_interface_current (void)
Return an integer representing the library interface current number.
@end deftypefun


@deftypefun int cct_version_interface_revision (void)
Return an integer representing the library interface current revision number.
@end deftypefun


@deftypefun int cct_version_interface_age (void)
Return an integer representing the library interface current age.
@end deftypefun

@c page
@node conditions
@chapter Exceptional condition objects


@menu
* conditions error::            An error condition.
@end menu

@c page
@node conditions error
@section An error condition


The @dfn{some error exceptional--condition object} has the purpose of describing an exceptional
condition caused by some error.

There should be only one @emph{some error} condition object: the one predefined by @value{PACKAGE}.

All the following definitions are accessible from the header file @file{cctemplate.h}.


@deftp {Struct Typedef} cct_descriptor_some_error_t
Structure type representing the descriptor for @emph{some error} condition objects.  This descriptor
has @objtype{cce_descriptor_runtime_error_t} as parent descriptor.
@end deftp


@deftp {Struct Typedef} cct_condition_some_error_t
Structure type representing an @emph{some error} condition object.
@end deftp


@deftypefun void cct_condition_init_some_error (cct_condition_some_error_t * @var{C})
Initialise an already allocated condition object.  This function exists to allow sub--typing from
@objtype{cct_condition_some_error_t}.
@end deftypefun


@deftypefun {cce_condition_t const *} cct_condition_new_some_error (void)
Return a pointer to the statically allocated structure representing the single @emph{some error}
condition object.
@end deftypefun


@deftypefun bool cct_condition_is_some_error (cce_condition_t const * @var{C})
Return @ctrue{} if @var{C} is an @emph{some error} condition object; otherwise return @cfalse{}.
@end deftypefun

@c page
@node utils
@chapter Utility definitions


@defmac CCT_PC (@var{POINTER_TYPE}, @var{POINTER_NAME}, @var{EXPRESSION})
Preprocessor macro used to define pointer variables initialised with a cast expression.  It expands
to:

@example
POINTER_TYPE * POINTER_NAME = (POINTER_TYPE *) (EXPRESSION)
@end example

For example, the macro use:

@example
CCT_PC(cct_descriptor_error_t, C, _C);
@end example

@noindent
expands into:

@example
cct_descriptor_error_t * C = \
   (cct_descriptor_error_t *) (_C);
@end example
@end defmac


@defmac CCT_UNUSED
Preprocessor macro that is meant to expand into an attribute declaration.  If the symbol
@code{__GNUC__} is defined, the expansion is:

@example
__attribute__((__unused__))
@end example

@noindent
otherwise the expansion is the empty string.
@end defmac

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DOCUMENTATION_URL}

@noindent
the latest release of this package can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
and as backup at:

@center @value{BITBUCKET_URL}

@noindent
the package CCExceptions is available at:

@center @url{https://github.com/marcomaggi/ccexceptions/}

@noindent
the package CCMemory is available at:

@center @url{https://github.com/marcomaggi/ccmemory/}

@noindent
the package CCStructs is available at:

@center @url{https://github.com/marcomaggi/ccstructs/}

@noindent
the package CCTests is available at:

@center @url{https://github.com/marcomaggi/cctests/}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

